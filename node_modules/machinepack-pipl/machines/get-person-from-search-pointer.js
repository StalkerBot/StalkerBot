module.exports = {
  friendlyName: 'Get Person from Search Pointer',
  description: 'Retrieve more information about a Person object from its search_pointer',
  extendedDescription: '',
  inputs: {
    key: {
      required: true,
      example: '00011122233344455',
      description: 'Your Pipl API key',
      whereToGet: {
        url: 'https://pipl.com/dev/',
        description: '',
        extendedDescription: ''
      }
    },
    search_pointer: {
      required: true,
      example: '165ed762c03848ea3b23101228441577f5a4c8041793',
      description: 'In the case when the API returns multiple possible persons, they will each have special string called “search pointer”. This string can be used to run a follow-up search, which will pull up more data about this person.'
    }
  },
  defaultExit: 'success',
  exits: {
    // Status 5xx
    error: {
      description: 'Pipl says something is wrong with their system.  It may be temporary or you may want to contact Pipl support.',
      extendedDescription: ''
    },
    // Status 400
    malformedRequest: {
      description: 'Pipl says your API request was malformed',
      extendedDescription: ''
    },
    // Status 403
    apiKeyProblem: {
      description: 'Pipl says your API key is invalid or your rate limit has been reached.',
      extendedDescription: ''
    },
    // Status 200
    success: {
      description: 'Done.'
    }
  },

  fn: function(inputs, exits) {
    var Http = require('machinepack-http');
    var qs = require('qs');

    var queryString = qs.stringify(inputs);
    var url = 'https://api.pipl.com/search/v4/?' + queryString;

    Http.sendHttpRequest({
      url: url,
      method: 'get'
    }).exec({
      // OK.
      success: function(result) {
        return exits.success(result.body);
      },
      error: function(err) {
        if (err) return exits.error(err);
      },
      // 404 status code returned from server
      notFound: function(result) {
        if (err) return exits.error(err);
      },
      // 400 status code returned from server
      badRequest: function(result) {
        return exits.error('Something was wrong with your HTTP request (' + result.status + ').');
      },
      // 403 status code returned from server
      forbidden: function(result) {
        return exits.apiKeyProblem('Invalid or unprovided API key (403).');
      },
      // 401 status code returned from server
      unauthorized: function(result) {
        return exits.apiKeyProblem('Invalid or unprovided API key (401).');
      },
      // 5xx status code returned from server (this usually means something went wrong on the other end)
      serverError: function(result) {
        result.machineMessage = 'Something went wrong on the other end (' + result.status + ').';
        return exits.error(result);
      },
      // Unexpected connection error: could not send or receive HTTP request.
      requestFailed: function() {
        return exits.error('Could not send or receive the HTTP request.');
      }
    });
  }

};
